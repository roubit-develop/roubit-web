{"version":3,"sources":["App.js","reportWebVitals.js","client.js","index.js"],"names":["App","validateCoupon","gql","useState","name","birthday","coupon","inputs","setInputs","useMutation","validate","loading","handleChange","e","target","value","temp","a","variables","Date","moment","format","toDateString","data","console","log","onClick","length","alert","className","src","alt","onChange","placeholder","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"8fAmFeA,MA9Ef,WACE,IAAMC,EAAiBC,cAAH,KADP,EAGcC,mBAAS,CAClCC,KAAK,GACLC,SAAS,GACTC,OAAO,KANI,mBAGNC,EAHM,KAGCC,EAHD,OAQeC,sBAAYR,GAR3B,mBAQPS,EARO,KASNN,GATM,KAQGO,QACeJ,EAAxBH,MAAKC,EAAmBE,EAAnBF,SAASC,EAAUC,EAAVD,OACfM,EAAc,SAACC,GAAK,IAAD,EACFA,EAAEC,OAAhBC,EADgB,EAChBA,MAAMX,EADU,EACVA,KACbI,EAAU,2BACLD,GADI,kBAENH,EAAMW,MAILC,EAAI,uCAAG,8BAAAC,EAAA,sEACQP,EAAS,CAACQ,UAAU,CAACd,OAAKC,SAAS,IAAIc,KAAKC,IAAOf,GAAUgB,OAAO,eAAeC,eAAehB,YAD1G,uBACLiB,EADK,EACLA,KACVC,QAAQC,IAAIF,GAFG,kBAGLA,GAHK,2CAAH,qDAKJG,EAAO,uCAAG,4BAAAT,EAAA,yDACM,GAAjBZ,EAASsB,QAA0B,IAAfrB,EAAOqB,OADhB,gCAEOX,IAFP,OAENO,EAFM,OAGZK,MAAK,OAACL,QAAD,IAACA,OAAD,EAACA,EAAMtB,gBAHA,sBAeZ2B,MAAM,sHAfM,2CAAH,qDAmBb,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACA,qBAAKC,IAAM,sEAAsEC,IAAK,kDACtF,2CAEA,sBAAKF,UAAU,UAAf,UACA,sBAAKA,UAAU,aAAf,UACE,oBAAIA,UAAY,oBAAhB,mDACA,sBAAKA,UAAU,OAAf,UAAsB,sBAAMA,UAAU,QAAhB,gCAAkC,uBAAOA,UAAU,aAAazB,KAAM,OAAO4B,SAAUpB,EAAcG,MAAOX,OAClI,sBAAKyB,UAAU,WAAf,UAA0B,sBAAMA,UAAU,SAAhB,sCAAoC,uBAAOA,UAAU,iBAAiBzB,KAAO,WAAW4B,SAAUpB,EAAcG,MAAOV,EAAU4B,YAAY,gBACzK,qBAAKJ,UAAU,uBAAf,SAAsC,iNACtC,0BAEA,sBAAKA,UAAU,eAAf,UACE,sBAAKA,UAAU,SAAf,UAAwB,sBAAMA,UAAU,UAAhB,sCAAxB,IAA8D,uBAAOA,UAAU,eAAezB,KAAM,SAAS4B,SAAUpB,EAAcG,MAAOT,OAC5I,qBAAKuB,UAAU,aAAf,SAA4B,wBAAQA,UAAU,aAAaH,QAASA,EAAxC,2CAE9B,sBAAKG,UAAU,YAAf,UACE,iEACA,oBAAGA,UAAU,iBAAb,oHAAqD,uBAArD,2JAC+C,uBACtD,uBAFO,0GAGwB,uBAC5B,uBAJI,qIAKsB,mBAAGK,KAAK,oCAAR,uCALtB,4DAKuF,uBAC/F,uBANQ,qKAO6B,uBAP7B,sFAQc,uBAAU,uBARxB,mJCvDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDCQ,EAJA,IAAIC,eAAa,CAC5BC,IAAI,qCACJC,MAAM,IAAIC,kBCIdC,IAASC,OACP,cAAC,iBAAD,CAAgBN,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.41370476.chunk.js","sourcesContent":["import './App.scss';\nimport React,{ useState} from 'react';\nimport {gql,useMutation} from '@apollo/client'\nimport moment from 'moment';\n\nfunction App() {\n  const validateCoupon = gql` mutation validateCoupon($name:String!,$birthday:DateTime!,$coupon:String!){ validateCoupon(name:$name,birthday:$birthday,coupon:$coupon)\n  }` ;\n  const [inputs,setInputs] = useState({\n    name:\"\",\n    birthday:\"\",\n    coupon:\"\",\n  })\n  const[validate,{loading}] = useMutation(validateCoupon)\n  const {name,birthday,coupon} = inputs;\n  const handleChange= (e)=>{\n    const {value,name} = e.target;\n    setInputs({\n      ...inputs,\n      [name]:value\n    });\n  };\n\n  const temp = async()=>{\n   const {data} =await validate({variables:{name,birthday:new Date(moment(birthday).format('YYYY-MM-DD')).toDateString(),coupon}});\nconsole.log(data)\n   return data\n  }\n  const onClick = async()=>{\n    if(birthday.length==8&&coupon.length==14){\n      const data = await temp()\n      alert(data?.validateCoupon)}\n      \n      // if(data?.validateCoupon==\"이미 등록된 쿠폰이 있음.\"){\n      //   if(confirm(\"쿠폰을 추가로 등록 하시겠습니다?\")){ // 확인시 새로운 mutation > add coupon 날리기 ! \n      //     muta\n      //   }\n      // }\n      // else{\n      //   alert(data?.validateCoupon)\n      // }\n    // }\n    else{\n      alert(\"쿠폰 또는 생년월일 입력이 잘못 되었습니다.\")\n    }\n\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"AppHeader\"> \n      <img src = \"https://roubitdev.s3.ap-northeast-2.amazonaws.com/filepath/logo.png\" alt =\"이미지 로드 실패 \"/>\n      <li>ROUBIT</li>\n      </div>\n      <div className=\"AppBody\"> \n      <div className=\"valid_Body\">\n        <h1 className = \"Input_description\">쿠폰번호 입력</h1>\n        <div className=\"name\"><span className=\"sname\">닉네임</span><input className=\"name_input\" name =\"name\" onChange={handleChange} value={name}/></div>\n        <div className=\"birthday\"><span className=\"sbirth\">생년월일</span><input className=\"birthday_input\" name = \"birthday\" onChange={handleChange} value={birthday} placeholder=\"YYYYMMDD\"/></div>\n      <div className=\"birthday_description\"><div>*닉네임,생년월일 확인방법: [앱 - 설정탭 - 마이페이지 - 회원정보수정]</div></div>\n      <hr></hr>\n      </div>\n      <div className=\"valid_Coupon\">\n        <div className=\"coupon\"><span className=\"scoupon\">쿠폰번호</span> <input className=\"coupon_input\" name =\"coupon\" onChange={handleChange} value={coupon}/></div>\n        <div className=\"submit_div\"><button className=\"submit_btn\" onClick={onClick}>적용하기</button></div>\n      </div>\n      <div className=\"attention\">\n        <h1>이용권 안내</h1>\n        <p className=\"attention-Body\">1. 생년월일이 일치해야 확인 가능합니다.<br></br>\n                       생년월일을 회원가입 시 입력하지 않았다면 입력해 주세요. <br></br>\n <br></br>\n    [앱 - 설정 탭 - 마이페이지 - 회원정보 수정]<br></br>\n    <br></br>\n2. 이용권 적용이 안되거나 이용 중 문제가 생겼다면 <a href=\"https://open.kakao.com/o/gc3XuKlc\">문의 링크</a>로 문의 부탁드립니다.<br></br>\n<br></br>\n3. 구글 정기결제, 무료체험 중에는 이용권 적용이 불가능합니다. <br></br>\n    정기결제 해제 후 적용해 주세요.<br></br ><br></br>\n    ※이 페이지는 모바일 환경에 최적화되어있습니다.</p>\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ApolloClient,InMemoryCache} from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n    uri:\"https://dev.roubitdev.shop/graphql\",\r\n    cache:new InMemoryCache()\r\n});\r\nexport default client","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ApolloProvider } from '@apollo/client';\nimport reportWebVitals from './reportWebVitals';\nimport client from './client';\n\nReactDOM.render(\n  <ApolloProvider client={client}> \n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}